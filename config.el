;; ~/.emacs.d/config.el -- Emacs configurations

;; Generated by Emacs Modular Configuration version 0.1
;; DO NOT EDIT THIS FILE.
;; Edit the files under '~/.emacs.d/config' directory tree, 
;; then run within emacs 'M-x emc-merge-config-files'

;; ############################################################################
;; Config file: ~/.emacs.d/config/bindings.el
;; Place personal bindings here
(require 'paredit)
;(define-key global-map (kbd "C-.") 'find-file-in-project)
(define-key global-map (kbd "C-M-.") 'find-file-in-repository)
;(define-key global-map (kbd "s-.") 'vc-git-grep)

(define-key global-map (kbd "s-}") 'next-buffer)
(define-key global-map (kbd "s-{") 'previous-buffer)

(define-key global-map (kbd "C-w") 'backward-kill-word)
(define-key global-map (kbd "C-x C-k") 'kill-region)
;(define-key global-map (kbd "C-c f") 'indent-buffer)
;(define-key global-map (kbd "C-c C-f") 'indent-buffer)

(define-key global-map (kbd "C-,") 'open-config-file)

(define-key global-map (kbd "C-c C-c") 'comment-or-uncomment-region)

(define-key global-map (kbd "C-M-;") 'ag-project)

;;(global-set-key (kbd "C-.") 'hippie-expand)
;;(global-set-key (kbd "C-:") 'hippie-expand-lines)

(define-key global-map (kbd "s-r") 'replace-string)

(define-key global-map (kbd "C-x b") 'ido-switch-buffer)

(define-key global-map (kbd "s-p") 'other-window)

(define-key key-translation-map [?\C-h] [?\C-?])
;;(global-set-key (kbd "<f1>") 'help-command)

(add-hook 'cider-mode-hook
          (lambda ()
            (define-key nrepl-mode-map (kbd "C-M-e") 'nrepl-eval-region)))

(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map (kbd "s-n") 'ace-jump-mode)

(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)


;; Make the scrolling keys give reasonable context
(global-set-key (kbd "C-v")
                (lambda ()
                  (interactive
                   (next-line (/ (window-height (selected-window)) 2))
                   )))

(global-set-key (kbd "M-v")
                (lambda ()
                  (interactive
                   (next-line (- (/ (window-height (selected-window)) 2))))))

;(define-key global-map (kbd "M-C-k") 'backward-kill-sexp)
;; find better key for this one

(global-set-key (kbd "C-M-l") 'mo-toggle-identifier-naming-style)

(global-set-key (kbd "C-c w") 'paredit-splice-sexp-killing-backward)

(global-set-key (kbd "C-c f") 'paredit-splice-sexp-killing-forward)

(global-set-key (kbd "C-x C-b") 'ibuffer)

(define-key global-map (kbd "C-c C-c") 'comment-or-uncomment-region-or-line)

(add-hook 'jsx-mode-hook
          (lambda ()
            (define-key jsx-mode-map (kbd "C-c C-c") 'comment-or-uncomment-region-or-line)))

(global-set-key (kbd "C-c C-r") 'replace-string)
(global-set-key (kbd "C-c `") 'align-regexp)


(global-set-key (kbd "C-c w") 'paredit-splice-sexp-killing-backward)
(global-set-key (kbd "C-c d") 'paredit-splice-sexp-killing-forward)

(global-set-key (kbd "C-c f") 'paredit-forward-slurp-sexp)
(global-set-key (kbd "C-c b") 'paredit-backward-slurp-sexp)
(define-key paredit-mode-map (kbd "C-w") 'paredit-backward-kill-word)





;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/defuns.el
(defun indent-buffer ()
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    ;;(untabify (point-min) (point-max))
    ))

(defun unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

(defun open-config-file ()
  (interactive)
  (find-file "~/.emacs.d/"))

;; From https://www.bunkus.org/blog/2009/12/switching-identifier-naming-style-between-camel-case-and-c-style-in-emacs/
(defun mo-toggle-identifier-naming-style ()
  "Toggles the symbol at point between C-style naming,
e.g. `hello_world_string', and camel case,
e.g. `HelloWorldString'."
  (interactive)
  (let* ((symbol-pos (bounds-of-thing-at-point 'symbol))
         case-fold-search symbol-at-point cstyle regexp func)
    (unless symbol-pos
      (error "No symbol at point"))
    (save-excursion
      (narrow-to-region (car symbol-pos) (cdr symbol-pos))
      (setq cstyle (string-match-p "_" (buffer-string))
            regexp (if cstyle "\\(?:\\_<\\|_\\)\\(\\w\\)" "\\([A-Z]\\)")
            func (if cstyle
                     'capitalize
                   (lambda (s)
                     (concat (if (= (match-beginning 1)
                                    (car symbol-pos))
                                 ""
                               "_")
                             (downcase s)))))
      (goto-char (point-min))
      (while (re-search-forward regexp nil t)
        (replace-match (funcall func (match-string 1))
                       t nil))
      (widen))))

(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/magit.el
(eval-after-load 'magit (lambda ()
(defun magit-toggle-whitespace ()
  (interactive)
  (if (member "-w" magit-diff-options)
      (magit-dont-ignore-whitespace)
    (magit-ignore-whitespace)))

(defun magit-ignore-whitespace ()
  (interactive)
  (add-to-list 'magit-diff-options "-w")
  (magit-refresh))

(defun magit-dont-ignore-whitespace ()
  (interactive)
  (setq magit-diff-options (remove "-w" magit-diff-options))
  (magit-refresh))

(define-key magit-status-mode-map (kbd "W") 'magit-toggle-whitespace)
			  ))


;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/ruby-mode.el
(require 'ruby-mode)

(defun ruby-end-of-block-or-parens ()
  (interactive)
  (if (looking-at "\[({[\]")
      (forward-list)
    (ruby-end-of-block)))

(defun ruby-beginning-of-block-or-parens ()
  (interactive)
  (let ((char (buffer-substring (1- (point)) (point))))
    ;; Somehow I couldn't get (looking-at "\[)}]\]") to work...
    (if (or (equal char ")")
            (equal char "}")
            (equal char "]"))
        (backward-list)
      (ruby-beginning-of-block))))

(define-key ruby-mode-map (kbd "C-M-n") 'ruby-end-of-block-or-parens)
(define-key ruby-mode-map (kbd "C-M-p") 'ruby-beginning-of-block-or-parens)

;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/setup-hippie.el
;; Hippie expand: look in buffer before filenames please
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

(defun hippie-expand-lines ()
  (interactive)
  (let ((hippie-expand-try-functions-list '(try-expand-line
                                            try-expand-line-all-buffers)))
    (hippie-expand nil)))

(provide 'setup-hippie)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/setup-ido.el
;; Interactively Do Things

(require 'ido)
(ido-mode t)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point nil
      ido-max-prospects 10)

;; Use C-w to go back up a dir to better match normal usage of C-w
;; - insert current file name with C-x C-w instead.
(define-key ido-file-completion-map (kbd "C-w") 'ido-delete-backward-updir)
(define-key ido-file-completion-map (kbd "C-x C-w") 'ido-copy-current-file-name)

;; Always rescan buffer for imenu
(set-default 'imenu-auto-rescan t)

(add-to-list 'ido-ignore-directories "target")
(add-to-list 'ido-ignore-directories "node_modules")

;; Use ido everywhere
(require 'ido-ubiquitous)
(ido-ubiquitous-mode 1)

(provide 'setup-ido)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/setup-paredit.el
(eval-after-load 'paredit
  ;; need a binding that works in the terminal
  '(define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp))

(require 'paredit)

(defun live-paredit-next-top-level-form ()
  (interactive)
  (while (ignore-errors (paredit-backward-up) t))
  (live-paredit-forward))

(defun live-paredit-previous-top-level-form ()
  (interactive)
  (if (ignore-errors (paredit-backward-up) t)
      (while (ignore-errors (paredit-backward-up) t))
    (paredit-backward)))

(defun live-paredit-forward ()
  "Feels more natural to move to the beginning of the next item
   in the sexp, not the end of the current one."
  (interactive)
  (if (and (not (paredit-in-string-p))
           (save-excursion
             (ignore-errors
               (forward-sexp)
               (forward-sexp)
               t)))
      (progn
        (forward-sexp)
        (forward-sexp)
        (backward-sexp))
    (paredit-forward)))

(defun live-paredit-forward-slurp-sexp-neatly ()
  (interactive)
  (save-excursion
    (cond ((or (paredit-in-comment-p)
               (paredit-in-char-p))
           (error "Invalid context for slurping S-expressions."))
          ((paredit-in-string-p)
           (paredit-forward-slurp-into-string))
          (t

           (save-excursion
             (paredit-forward-up)
             (paredit-backward-down)
             (paredit-forward-slurp-sexp)
             (just-one-space)))))
  (when (not (save-excursion
               (ignore-errors
                 (backward-sexp)
                 t)))
    (delete-horizontal-space)))



(defun live-paredit-forward-kill-sexp (&optional arg)
  (interactive "p")
  (cond ((or (paredit-in-comment-p)
             (paredit-in-string-p)) (kill-word (or arg 1)))
        (t (kill-sexp (or arg 1)))))

(defun live-paredit-backward-kill-sexp (&optional arg)
  (interactive "p")
  (cond ((or (paredit-in-comment-p)
             (paredit-in-string-p)) (backward-kill-word (or arg 1)))
        (t (backward-kill-sexp (or arg 1)))))

(defun live-paredit-backward-kill ()
  (interactive)
  (let ((m (point-marker)))
    (paredit-backward-up)
    (forward-char)
    (delete-region (point) m)))

(defun live-paredit-delete-horizontal-space ()
  (interactive)
  (just-one-space -1)
  (paredit-backward-delete))

(defun live-paredit-tidy-trailing-parens ()
  (interactive)
  (save-excursion
    (while (ignore-errors (paredit-forward-up) t))
    (backward-char)
    (live-paredit-delete-horizontal-space)
    (while
        (or
         (eq (char-before) ?\))
         (eq (char-before) ?\})
         (eq (char-before) ?\]))
      (backward-char)
      (live-paredit-delete-horizontal-space))))

(defun live-paredit-reindent-defun (&optional argument)
  "Reindent the definition that the point is on. If the point is
  in a string or a comment, fill the paragraph instead, and with
  a prefix argument, justify as well. Doesn't mess about with
  Clojure fn arglists when filling-paragraph in docstrings.
  Also tidies up trailing parens when in a lisp form"
  (interactive "P")
  (cond ((paredit-in-comment-p) (fill-paragraph argument))
        ((paredit-in-string-p) (progn
                                 (save-excursion
                                   (paredit-forward-up)
                                   (insert "\n"))
                                 (fill-paragraph argument)
                                 (save-excursion
                                   (paredit-forward-up)
                                   (delete-char 1))))
        (t (when (not (live-paredit-top-level-p))
             (progn (save-excursion
                      (end-of-defun)
                      (beginning-of-defun)
                      (indent-sexp))
                    (live-paredit-tidy-trailing-parens))))))


(defun live-paredit-forward-down ()
  "Doesn't freeze Emacs if attempted to be called at end of
   buffer. Otherwise similar to paredit-forward-down."
  (interactive)
  (if (save-excursion
          (forward-comment (buffer-size))
          (not (live-end-of-buffer-p)))
      (paredit-forward-down)
    (error "unexpected end of buffer")))

(defun live-paredit-top-level-p ()
  "Returns true if point is not within a given form i.e. it's in
  toplevel 'whitespace'"
  (not
   (save-excursion
     (ignore-errors
       (paredit-forward-up)
       t))))

(require 'paredit)

(defun paredit-barf-all-the-way-backward ()
  (interactive)
  (paredit-split-sexp)
  (paredit-backward-down)
  (paredit-splice-sexp))
(defun paredit-barf-all-the-way-forward ()
  (interactive)
  (paredit-split-sexp)
  (paredit-forward-down)
  (paredit-splice-sexp)
  (if (eolp) (delete-horizontal-space)))
(defun paredit-slurp-all-the-way-backward ()
  (interactive)
  (catch 'done
    (while (not (bobp))
      (save-excursion
        (paredit-backward-up)
        (if (eq (char-before) ?\()
            (throw 'done t)))
      (paredit-backward-slurp-sexp))))
(defun paredit-slurp-all-the-way-forward ()
  (interactive)
  (catch 'done
    (while (not (eobp))
      (save-excursion
        (paredit-forward-up)
        (if (eq (char-after) ?\))
            (throw 'done t)))
      (paredit-forward-slurp-sexp))))
(nconc paredit-commands
       '("Extreme Barfage & Slurpage"
         (("C-M-)")
          paredit-slurp-all-the-way-forward
          ("(foo (bar |baz) quux zot)"
           "(foo (bar |baz quux zot))")
          ("(a b ((c| d)) e f)"
           "(a b ((c| d)) e f)"))
         (("C-M-}" "M-F")
          paredit-barf-all-the-way-forward
          ("(foo (bar |baz quux) zot)"
           "(foo (bar|) baz quux zot)"))
         (("C-M-(")
          paredit-slurp-all-the-way-backward
          ("(foo bar (baz| quux) zot)"
           "((foo bar baz| quux) zot)")
          ("(a b ((c| d)) e f)"
           "(a b ((c| d)) e f)"))
         (("C-M-{" "M-B")
          paredit-barf-all-the-way-backward
          ("(foo (bar baz |quux) zot)"
           "(foo bar baz (|quux) zot)"))))
(paredit-define-keys)
(paredit-annotate-mode-with-examples)
(paredit-annotate-functions-with-examples)
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/shell.el
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
;; ############################################################################


;; ############################################################################
;; Config file: ~/.emacs.d/config/stripped-starter-kit-bindings.el
;; Completion that uses many different methods to find options.
(global-set-key (kbd "M-/") 'hippie-expand)

;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; Use regex searches by default.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Jump to a definition in the current file. (Protip: this is awesome.)
(global-set-key (kbd "C-x C-i") 'imenu)

;; File finding
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)

;; Window switching. (C-x o goes to the next window)
(windmove-default-keybindings) ;; Shift+direction
;; (global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
;; (global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two

;; Start eshell or switch to it if it's active.
(global-set-key (kbd "C-x m") 'eshell)

;; Start a new eshell even if one is active.
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))

;; M-S-6 is awkward
(global-set-key (kbd "C-c q") 'join-line)

;; So good!
(global-set-key (kbd "C-c g") 'magit-status)

;; This is a little hacky since VC doesn't support git add internally
(eval-after-load 'vc
  (define-key vc-prefix-map "i"
    '(lambda () (interactive)
       (if (not (eq 'Git (vc-backend buffer-file-name)))
           (vc-register)
         (shell-command (format "git add %s" buffer-file-name))
         (message "Staged changes.")))))

;; Activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))



;; ############################################################################


;; ~/.emacs.d/config.el ends here
